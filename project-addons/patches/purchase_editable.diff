=== modified file 'purchase/purchase.py'
--- purchase/purchase.py    2012-07-25 17:07:19 +0000
+++ purchase/purchase.py    2015-01-26 13:31:29 +0000
@@ -172,7 +172,7 @@
         'location_id': fields.many2one('stock.location', 'Destination', required=True, domain=[('usage','<>','view')]),
         'pricelist_id':fields.many2one('product.pricelist', 'Pricelist', required=True, states={'confirmed':[('readonly',True)], 'approved':[('readonly',True)],'done':[('readonly',True)]}, help="The pricelist sets the currency used for this purchase order. It also computes the supplier price for the selected products/quantities."),
         'state': fields.selection(STATE_SELECTION, 'State', readonly=True, help="The state of the purchase order or the quotation request. A quotation is a purchase order in a 'Draft' state. Then the order has to be confirmed by the user, the state switch to 'Confirmed'. Then the supplier must confirm the order to change the state to 'Approved'. When the purchase order is paid and received, the state becomes 'Done'. If a cancel action occurs in the invoice or in the reception of goods, the state becomes in exception.", select=True),
-        'order_line': fields.one2many('purchase.order.line', 'order_id', 'Order Lines', states={'approved':[('readonly',True)],'done':[('readonly',True)]}),
+        'order_line': fields.one2many('purchase.order.line', 'order_id', 'Order Lines'),
         'validator' : fields.many2one('res.users', 'Validated by', readonly=True),
         'notes': fields.text('Notes'),
         'invoice_ids': fields.many2many('account.invoice', 'purchase_invoice_rel', 'purchase_id', 'invoice_id', 'Invoices', help="Invoices generated for a purchase order"),
@@ -656,12 +656,12 @@
             return False

     _columns = {
-        'name': fields.char('Description', size=256, required=True),
-        'product_qty': fields.float('Quantity', digits_compute=dp.get_precision('Product UoM'), required=True),
-        'date_planned': fields.date('Scheduled Date', required=True, select=True),
+        'name': fields.char('Description', size=256, required=True, readonly=True, states={'draft':[('readonly',True)]}),
+        'product_qty': fields.float('Quantity', digits_compute=dp.get_precision('Product UoM'), required=True, readonly=True, states={'draft':[('readonly',True)]}),
+        'date_planned': fields.date('Scheduled Date', required=True, select=True, readonly=True, states={'draft':[('readonly',True)]}),
         'taxes_id': fields.many2many('account.tax', 'purchase_order_taxe', 'ord_id', 'tax_id', 'Taxes'),
-        'product_uom': fields.many2one('product.uom', 'Product UOM', required=True),
-        'product_id': fields.many2one('product.product', 'Product', domain=[('purchase_ok','=',True)], change_default=True),
+        'product_uom': fields.many2one('product.uom', 'Product UOM', required=True, readonly=True, states={'draft':[('readonly',True)]}),
+        'product_id': fields.many2one('product.product', 'Product', domain=[('purchase_ok','=',True)], change_default=True, readonly=True, states={'draft':[('readonly',True)]}),
         'move_ids': fields.one2many('stock.move', 'purchase_line_id', 'Reservation', readonly=True, ondelete='set null'),
         'move_dest_id': fields.many2one('stock.move', 'Reservation Destination', ondelete='set null'),
         'price_unit': fields.float('Unit Price', required=True, digits_compute= dp.get_precision('Purchase Price')),

=== modified file 'purchase/stock.py'
--- purchase/stock.py   2012-02-01 11:37:24 +0000
+++ purchase/stock.py   2015-01-26 13:37:49 +0000
@@ -72,17 +72,16 @@
     def _get_price_unit_invoice(self, cursor, user, move_line, type):
         if move_line.purchase_line_id:
-            if move_line.purchase_line_id.order_id.invoice_method == 'picking':
-                return move_line.price_unit
-            else:
-                return move_line.purchase_line_id.price_unit
+            return move_line.purchase_line_id.price_unit
         return super(stock_picking, self)._get_price_unit_invoice(cursor, user, move_line, type)

     def _get_discount_invoice(self, cursor, user, move_line):
